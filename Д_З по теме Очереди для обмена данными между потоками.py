# Цель задания:
#
# Освоить механизмы создания потоков и очередей для обмена данных между ними в Python.
# Практически применить знания, создав и запустив несколько потоков и очередь.

# Задание:
# Моделирование работы сети кафе с несколькими столиками и потоком посетителей,
# прибывающих для заказа пищи и уходящих после завершения приема.
#
# Есть сеть кафе с несколькими столиками. Посетители приходят, заказывают еду,
# занимают столик, употребляют еду и уходят. Если столик свободен, новый посетитель
# принимается к обслуживанию, иначе он становится в очередь на ожидание.

# Создайте 3 класса:
# Table - класс для столов, который будет содержать следующие атрибуты:
# number(int) - номер стола, is_busy(bool) - занят стол или нет.

# Cafe - класс для симуляции процессов в кафе. Должен содержать следующие атрибуты и методы:
# Атрибуты queue - очередь посетителей (создаётся внутри init), tables список столов (поступает из вне).
# Метод customer_arrival(self) - моделирует приход посетителя(каждую секунду).
# Метод serve_customer(self, customer) - моделирует обслуживание посетителя.
# Проверяет наличие свободных столов, в случае наличия стола - начинает обслуживание посетителя
# (запуск потока), в противном случае - посетитель поступает в очередь. Время обслуживания 5 секунд.
# Customer - класс (поток) посетителя. Запускается, если есть свободные столы.

# Так же должны выводиться текстовые сообщения соответствующие событиям:
# Посетитель номер <номер посетителя> прибыл.
# Посетитель номер <номер посетителя> сел за стол <номер стола>. (начало обслуживания)
# Посетитель номер <номер посетителя> покушал и ушёл. (конец обслуживания)
# Посетитель номер <номер посетителя> ожидает свободный стол. (помещение в очередь)

# Пример работы:


# Вывод на консоль (20 посетителей [ограничение выставить в методе customer_arrival]):
# Посетитель номер 1 прибыл
# Посетитель номер 1 сел за стол 1
# Посетитель номер 2 прибыл
# Посетитель номер 2 сел за стол 2
# Посетитель номер 3 прибыл
# Посетитель номер 3 сел за стол 3
# Посетитель номер 4 прибыл
# Посетитель номер 4 ожидает свободный стол
# Посетитель номер 5 прибыл
# Посетитель номер 5 ожидает свободный стол
# ......
# Посетитель номер 20 прибыл
# Посетитель номер 20 ожидает свободный стол
# Посетитель номер 17 покушал и ушёл.
# Посетитель номер 20 сел за стол N.
# Посетитель номер 18 покушал и ушёл.
# Посетитель номер 19 покушал и ушёл.
# Посетитель номер 20 покушал и ушёл.

import threading
import time
from queue import Queue


class Table:
    def __init__(self, number):
        self.number = number
        self.is_busy = False


class Customer(threading.Thread):
    def __init__(self, number, table):
        threading.Thread.__init__(self)
        self.number = number
        self.table = table

    def run(self):
        print(f"Посетитель номер {self.number} прибыл")
        while self.table.is_busy:
            print(f"Посетитель номер {self.number} ожидает свободный стол")
            time.sleep(1)
        self.table.is_busy = True
        print(f"Посетитель номер {self.number} сел за стол {self.table.number} (начало обслуживания)")
        time.sleep(5)
        print(f"Посетитель номер {self.number} покушал и ушёл (конец обслуживания)")
        self.table.is_busy = False


class Cafe:
    def __init__(self, tables):
        self.queue = Queue()
        self.tables = tables

    def customer_arrival(self):
        for i in range(1, 21):  # Ограничение на 20 посетителей
            table = None
            for t in self.tables:
                if not t.is_busy:
                    table = t
                    break
            if table:
                customer = Customer(i, table)
                customer.start()
            else:
                print(f"Посетитель номер {i} ожидает свободный стол")
                time.sleep(1)  # Время ожидания для следующего посетителя


# Создаем столики в кафе
table1 = Table(1)
table2 = Table(2)
table3 = Table(3)
tables = [table1, table2, table3]

# Инициализируем кафе
cafe = Cafe(tables)

cafe.customer_arrival()
